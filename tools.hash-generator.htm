<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Hash Generator | CyberGuard Jamin</title>
  <link rel="stylesheet" href="../style.css" />
  <style>
    body {
      background: #000;
      color: #0f0;
      font-family: monospace;
      padding: 20px;
      text-align: center;
    }
    input, select, button, textarea {
      margin: 10px auto;
      padding: 10px;
      font-size: 16px;
      border-radius: 6px;
      border: 1px solid #0f0;
      background: #111;
      color: #0f0;
      display: block;
      width: 90%;
      max-width: 600px;
    }
    button {
      cursor: pointer;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h2>Hash Generator</h2>

  <input type="text" id="inputText" placeholder="Enter text to hash" />
  <select id="hashType">
    <option value="MD5">MD5</option>
    <option value="SHA-1">SHA-1</option>
    <option value="SHA-256" selected>SHA-256</option>
  </select>
  <button onclick="generateHash()">Generate Hash</button>

  <textarea id="outputHash" placeholder="Hash will appear here" readonly></textarea>

  <script>
    async function generateHash() {
      const text = document.getElementById('inputText').value;
      const type = document.getElementById('hashType').value;
      if (!text) {
        alert('Please enter some text.');
        return;
      }

      let hashBuffer;
      if (type === 'MD5') {
        // MD5 is not natively supported by SubtleCrypto; use a JS library or fallback.
        alert('MD5 hashing is not supported natively. Use SHA-1 or SHA-256.');
        return;
      }

      if (type === 'SHA-1' || type === 'SHA-256') {
        const encoder = new TextEncoder();
        const data = encoder.encode(text);
        hashBuffer = await crypto.subtle.digest(type, data);
      }

      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
      document.getElementById('outputHash').value = hashHex;
    }
  </script>
</body>
</html>